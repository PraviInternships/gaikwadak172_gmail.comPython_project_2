name: Code Quality (Python)

on:
  push:
    branches:
      - main
    paths:
      - '**/*.py'
  pull_request:
    branches:
      - main
    paths:
      - '**/*.py'
  workflow_dispatch:
    inputs:
      custom_username:
        description: 'Enter custom username (default is "default-user")'
        required: false
        default: 'default-user'

jobs:
  lint:
    name: Lint Python Codebase
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install Pylint
        run: |
          python -m pip install --upgrade pip
          pip install pylint

      - name: Run Pylint and Generate Report
        run: |
          # Run pylint and save the output in a text file
          pylint . > pylint-report.txt || true

      - name: Calculate Quality Score
        run: |
          # Initialize variables
          errors=0
          warnings=0
          conventions=0  # To count the conventions violations (C errors)

          # Parse the Pylint report to calculate Errors (E), Warnings (W), and Conventions (C)
          errors=$(grep -oP 'E\d{4}' pylint-report.txt | wc -l || echo 0)
          warnings=$(grep -oP 'W\d{4}' pylint-report.txt | wc -l || echo 0)
          conventions=$(grep -oP 'C\d{4}' pylint-report.txt | wc -l || echo 0)  # Count 'C' errors (conventions)

          # Calculate LLOC as the sum of errors, warnings, and conventions
          lloc=$((errors + warnings ))

          # Calculate the quality score using the formula
          quality_score=$(echo "scale=2; ((5 * $errors + $warnings ) / $lloc) * 10 -10" | bc)

          # Save the quality score to a file
          echo "Code Quality Score: $quality_score%" > quality_score.txt

      - name: Move Reports to docs/
        run: |
          # Use a custom username from workflow inputs or default to "default-user"
          USERNAME="${{ github.event.inputs.custom_username || 'default-user' }}"

          # Define the path for the user's folder in the docs directory
          DOCS_FOLDER="docs/$USERNAME"

          # Create the docs folder if it doesn't exist
          mkdir -p "$DOCS_FOLDER"

          # Move the reports to the user's folder in the docs directory
          mv pylint-report.txt "$DOCS_FOLDER/"
          mv quality_score.txt "$DOCS_FOLDER/"

      - name: Upload Reports as Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: python-quality-reports
          path: docs/${{ github.event.inputs.custom_username || 'default-user' }}/

      - name: Commit and Push Reports to GitHub Pages
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

          # Add and commit the reports
          git add docs/${{ github.event.inputs.custom_username || 'default-user' }}/
          git commit -m "Update Python quality report for ${{ github.event.inputs.custom_username || 'default-user' }}"

          # Push the changes to GitHub Pages
          git push https://x-access-token:${GH_PAT}@github.com/${{ github.repository }} main --force
